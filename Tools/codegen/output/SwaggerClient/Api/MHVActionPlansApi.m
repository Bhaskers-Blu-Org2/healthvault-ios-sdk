//
// MHVActionPlansApi.m
// MHVLib
//
// Copyright (c) 2017 Microsoft Corporation. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

/**
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#import <Foundation/Foundation.h>
#import "MHVRemoteMonitoringClient.h"
#import "MHVClient.h"
#import "MHVActionPlansApi.h"
#import "MHVActionPlanAdherenceSummary.h"
#import "MHVActionPlansResponseV2ActionPlanInstance_.h"
#import "MHVMicrosoftKhronosCloudCommonErrorsErrorResponse.h"
#import "MHVSystemObject.h"
#import "MHVV2ActionPlan.h"
#import "MHVV2ActionPlanInstance.h"


@implementation MHVRemoteMonitoringClient (MHVActionPlansApi)

NSString* kMHVActionPlansApiErrorDomain = @"MHVActionPlansApiErrorDomain";
NSInteger kMHVActionPlansApiMissingParamErrorCode = 234513;

#pragma mark - Api Methods

///
/// Post an action plan instance
/// 
///  @param actionPlan The instance of the plan to create. 
///
///  @returns MHVSystemObject*
///
+ (NSURLSessionTask*)createActionPlanWithActionPlan: (MHVV2ActionPlan*) actionPlan
    completionHandler: (void (^ _Nonnull)(MHVSystemObject* _Nullable output, NSError* _Nullable error)) handler {
    // verify the required parameter 'actionPlan' is set
    if (actionPlan == nil) {
        NSParameterAssert(actionPlan);
        if(handler) {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"actionPlan"] };
            NSError* error = [NSError errorWithDomain:kMHVActionPlansApiErrorDomain code:kMHVActionPlansApiMissingParamErrorCode userInfo:userInfo];
            handler(nil, error);
        }
        return nil;
    }

    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/ActionPlans"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    bodyParam = actionPlan;

    return [MHVRemoteMonitoringClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                      body: bodyParam
                                   toClass: [MHVSystemObject class]
                    //        responseType: [MHVSystemObject* class]
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((MHVSystemObject*)data, error);
                                }
                            }];
}

///
/// Delete an action plan instance
/// 
///  @param actionPlanId The instance of the plan to delete. 
///
///  @returns MHVSystemObject*
///
+ (NSURLSessionTask*)deleteActionPlanWithActionPlanId: (NSString*) actionPlanId
    completionHandler: (void (^ _Nonnull)(MHVSystemObject* _Nullable output, NSError* _Nullable error)) handler {
    // verify the required parameter 'actionPlanId' is set
    if (actionPlanId == nil) {
        NSParameterAssert(actionPlanId);
        if(handler) {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"actionPlanId"] };
            NSError* error = [NSError errorWithDomain:kMHVActionPlansApiErrorDomain code:kMHVActionPlansApiMissingParamErrorCode userInfo:userInfo];
            handler(nil, error);
        }
        return nil;
    }

    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/ActionPlans/{actionPlanId}"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];
    if (actionPlanId != nil) {
        pathParams[@"actionPlanId"] = actionPlanId;
    }

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];

    return [MHVRemoteMonitoringClient requestWithPath: resourcePath
                                    method: @"DELETE"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                      body: bodyParam
                                   toClass: [MHVSystemObject class]
                    //        responseType: [MHVSystemObject* class]
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((MHVSystemObject*)data, error);
                                }
                            }];
}

///
/// Remove an action plan objective
/// 
///  @param actionPlanId The instance of the plan that the objective belongs to. 
///
///  @param objectiveId The instance of the objective to delete. 
///
///  @returns MHVSystemObject*
///
+ (NSURLSessionTask*)deleteActionPlanObjectiveWithActionPlanId: (NSString*) actionPlanId
    objectiveId: (NSString*) objectiveId
    completionHandler: (void (^ _Nonnull)(MHVSystemObject* _Nullable output, NSError* _Nullable error)) handler {
    // verify the required parameter 'actionPlanId' is set
    if (actionPlanId == nil) {
        NSParameterAssert(actionPlanId);
        if(handler) {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"actionPlanId"] };
            NSError* error = [NSError errorWithDomain:kMHVActionPlansApiErrorDomain code:kMHVActionPlansApiMissingParamErrorCode userInfo:userInfo];
            handler(nil, error);
        }
        return nil;
    }

    // verify the required parameter 'objectiveId' is set
    if (objectiveId == nil) {
        NSParameterAssert(objectiveId);
        if(handler) {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"objectiveId"] };
            NSError* error = [NSError errorWithDomain:kMHVActionPlansApiErrorDomain code:kMHVActionPlansApiMissingParamErrorCode userInfo:userInfo];
            handler(nil, error);
        }
        return nil;
    }

    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/ActionPlans/{actionPlanId}/Objectives/{objectiveId}"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];
    if (actionPlanId != nil) {
        pathParams[@"actionPlanId"] = actionPlanId;
    }
    if (objectiveId != nil) {
        pathParams[@"objectiveId"] = objectiveId;
    }

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];

    return [MHVRemoteMonitoringClient requestWithPath: resourcePath
                                    method: @"DELETE"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                      body: bodyParam
                                   toClass: [MHVSystemObject class]
                    //        responseType: [MHVSystemObject* class]
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((MHVSystemObject*)data, error);
                                }
                            }];
}

///
/// Gets adherence information for an action plan.
/// 
///  @param startTime The start time. 
///
///  @param endTime The end time. 
///
///  @param actionPlanId The action plan identifier. 
///
///  @param objectiveId The objective to filter the report to. (optional)
///
///  @param taskId The task to filter the report to. (optional)
///
///  @returns MHVActionPlanAdherenceSummary*
///
+ (NSURLSessionTask*)getActionPlanAdherenceWithStartTime: (NSDate*) startTime
    endTime: (NSDate*) endTime
    actionPlanId: (NSString*) actionPlanId
    objectiveId: (NSString*) objectiveId
    taskId: (NSString*) taskId
    completionHandler: (void (^ _Nonnull)(MHVActionPlanAdherenceSummary* _Nullable output, NSError* _Nullable error)) handler {
    // verify the required parameter 'startTime' is set
    if (startTime == nil) {
        NSParameterAssert(startTime);
        if(handler) {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"startTime"] };
            NSError* error = [NSError errorWithDomain:kMHVActionPlansApiErrorDomain code:kMHVActionPlansApiMissingParamErrorCode userInfo:userInfo];
            handler(nil, error);
        }
        return nil;
    }

    // verify the required parameter 'endTime' is set
    if (endTime == nil) {
        NSParameterAssert(endTime);
        if(handler) {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"endTime"] };
            NSError* error = [NSError errorWithDomain:kMHVActionPlansApiErrorDomain code:kMHVActionPlansApiMissingParamErrorCode userInfo:userInfo];
            handler(nil, error);
        }
        return nil;
    }

    // verify the required parameter 'actionPlanId' is set
    if (actionPlanId == nil) {
        NSParameterAssert(actionPlanId);
        if(handler) {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"actionPlanId"] };
            NSError* error = [NSError errorWithDomain:kMHVActionPlansApiErrorDomain code:kMHVActionPlansApiMissingParamErrorCode userInfo:userInfo];
            handler(nil, error);
        }
        return nil;
    }

    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/ActionPlans/{actionPlanId}/Adherence"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];
    if (actionPlanId != nil) {
        pathParams[@"actionPlanId"] = actionPlanId;
    }

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (startTime != nil) {
        queryParams[@"startTime"] = startTime;
    }
    if (endTime != nil) {
        queryParams[@"endTime"] = endTime;
    }
    if (objectiveId != nil) {
        queryParams[@"objectiveId"] = objectiveId;
    }
    if (taskId != nil) {
        queryParams[@"taskId"] = taskId;
    }

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];

    return [MHVRemoteMonitoringClient requestWithPath: resourcePath
                                    method: @"GET"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                      body: bodyParam
                                   toClass: [MHVActionPlanAdherenceSummary class]
                    //        responseType: [MHVActionPlanAdherenceSummary* class]
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((MHVActionPlanAdherenceSummary*)data, error);
                                }
                            }];
}

///
/// Get an instance of a specific action plan
/// 
///  @param actionPlanId The action plan to update. 
///
///  @returns MHVV2ActionPlanInstance*
///
+ (NSURLSessionTask*)getActionPlanByIdWithActionPlanId: (NSString*) actionPlanId
    completionHandler: (void (^ _Nonnull)(MHVV2ActionPlanInstance* _Nullable output, NSError* _Nullable error)) handler {
    // verify the required parameter 'actionPlanId' is set
    if (actionPlanId == nil) {
        NSParameterAssert(actionPlanId);
        if(handler) {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"actionPlanId"] };
            NSError* error = [NSError errorWithDomain:kMHVActionPlansApiErrorDomain code:kMHVActionPlansApiMissingParamErrorCode userInfo:userInfo];
            handler(nil, error);
        }
        return nil;
    }

    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/ActionPlans/{actionPlanId}"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];
    if (actionPlanId != nil) {
        pathParams[@"actionPlanId"] = actionPlanId;
    }

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];

    return [MHVRemoteMonitoringClient requestWithPath: resourcePath
                                    method: @"GET"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                      body: bodyParam
                                   toClass: [MHVV2ActionPlanInstance class]
                    //        responseType: [MHVV2ActionPlanInstance* class]
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((MHVV2ActionPlanInstance*)data, error);
                                }
                            }];
}

///
/// Get a collection of action plans
/// 
///  @param maxPageSize The maximum number of entries to return per page. Defaults to 1000. (optional)
///
///  @returns MHVActionPlansResponseV2ActionPlanInstance_*
///
+ (NSURLSessionTask*)getActionPlansWithMaxPageSize: (NSNumber*) maxPageSize
    completionHandler: (void (^ _Nonnull)(MHVActionPlansResponseV2ActionPlanInstance_* _Nullable output, NSError* _Nullable error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/ActionPlans"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (maxPageSize != nil) {
        queryParams[@"maxPageSize"] = maxPageSize;
    }

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];

    return [MHVRemoteMonitoringClient requestWithPath: resourcePath
                                    method: @"GET"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                      body: bodyParam
                                   toClass: [MHVActionPlansResponseV2ActionPlanInstance_ class]
                    //        responseType: [MHVActionPlansResponseV2ActionPlanInstance_* class]
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((MHVActionPlansResponseV2ActionPlanInstance_*)data, error);
                                }
                            }];
}

///
/// Update an action plan instance with merge
/// 
///  @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions              will be left, as is, unless invalid. 
///
///  @returns MHVActionPlansResponseV2ActionPlanInstance_*
///
+ (NSURLSessionTask*)patchActionPlanWithActionPlan: (MHVV2ActionPlanInstance*) actionPlan
    completionHandler: (void (^ _Nonnull)(MHVActionPlansResponseV2ActionPlanInstance_* _Nullable output, NSError* _Nullable error)) handler {
    // verify the required parameter 'actionPlan' is set
    if (actionPlan == nil) {
        NSParameterAssert(actionPlan);
        if(handler) {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"actionPlan"] };
            NSError* error = [NSError errorWithDomain:kMHVActionPlansApiErrorDomain code:kMHVActionPlansApiMissingParamErrorCode userInfo:userInfo];
            handler(nil, error);
        }
        return nil;
    }

    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/ActionPlans"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    bodyParam = actionPlan;

    return [MHVRemoteMonitoringClient requestWithPath: resourcePath
                                    method: @"PATCH"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                      body: bodyParam
                                   toClass: [MHVActionPlansResponseV2ActionPlanInstance_ class]
                    //        responseType: [MHVActionPlansResponseV2ActionPlanInstance_* class]
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((MHVActionPlansResponseV2ActionPlanInstance_*)data, error);
                                }
                            }];
}

///
/// Update/Replace a complete action plan instance with no merge.
/// 
///  @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version. 
///
///  @returns MHVActionPlansResponseV2ActionPlanInstance_*
///
+ (NSURLSessionTask*)putActionPlanWithActionPlan: (MHVV2ActionPlanInstance*) actionPlan
    completionHandler: (void (^ _Nonnull)(MHVActionPlansResponseV2ActionPlanInstance_* _Nullable output, NSError* _Nullable error)) handler {
    // verify the required parameter 'actionPlan' is set
    if (actionPlan == nil) {
        NSParameterAssert(actionPlan);
        if(handler) {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"actionPlan"] };
            NSError* error = [NSError errorWithDomain:kMHVActionPlansApiErrorDomain code:kMHVActionPlansApiMissingParamErrorCode userInfo:userInfo];
            handler(nil, error);
        }
        return nil;
    }

    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/ActionPlans"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    bodyParam = actionPlan;

    return [MHVRemoteMonitoringClient requestWithPath: resourcePath
                                    method: @"PUT"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                      body: bodyParam
                                   toClass: [MHVActionPlansResponseV2ActionPlanInstance_ class]
                    //        responseType: [MHVActionPlansResponseV2ActionPlanInstance_* class]
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((MHVActionPlansResponseV2ActionPlanInstance_*)data, error);
                                }
                            }];
}



@end
